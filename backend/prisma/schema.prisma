// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Store authors
model Author {
    admin         Boolean?
    id            String          @id @default(cuid())
    email         String          @unique
    password      String
    displayName   String
    github        String?
    profileImage  String?
    Post          Post[]
    FriendRequest FriendRequest[]
    Friends       Friends[]
}

// Store posts. Each post has a primary key, and references a foreign key author id
model Post {
    id          String    @id @default(cuid())
    author      Author    @relation(fields: [authorId], references: [id])
    authorId    String
    title       String
    source      String
    origin      String
    description String
    contentType String // [text/plain, text/markdown, application/base64, image/png;base64, image/jpeg;base64]
    content     String?
    categories  String[]
    count       Int
    published   DateTime
    visibility  String // [public, friends]
    unlisted    Boolean
    Comment     Comment[]
    likeCount   Int       @default(0)
}

// Store comments. Each comment has a primary key, and references a foreign keys author id and post id
model Comment {
    id          String   @id @default(cuid())
    authorId    String
    postId      String
    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    contentType String // [text/plain, text/markdown, application/base64, image/png;base64, image/jpeg;base64]
    comment     String
    published   DateTime
    node String? //have node if remote author
}

// Store likes. Primary key is a combined author id and object
model Likes {
    object  String
    authorId String  // who liked this object,just id if local , url vs node populated if remote
    summary String
    context String
    node String? //have node if remote author
    @@id([object, authorId])
}

// Store inbox.  Primary key is a combined post id and author id
model Inbox {
    id          Int      @id @default(autoincrement()) //cant use unique id based on fields 
    type        String // "post", "follow", "like", or "comment"
    src         String // If post, then post id.  If following, then following author id.  If like, then liked post id.  If comment, then comment id.  (URL if remote)
    message     String
    owner       String
    dateTime    DateTime? // Timestamp the event
}

// Store followers.  AuthorId follows FollowingId
model Followers {
    authorId    String // Author id
    followingId String // The author id of the one being followed.  
    // No relation is enforced because they can be on a different host
    node        String?  
    @@id([authorId, followingId])
}

// Store friendships.  AuthorId is friends with FriendId, but FriendId is not neccessarily friends with AuthorId
model Friends {
    authorId String // Local CUID or remote host
    friendId String // Local CUID
    friend   Author @relation(fields: [friendId], references: [id])

    @@id([authorId, friendId])
}

// Store follow requests.  AuthorId wants to follow FollowReqId
model FriendRequest {
    authorId    String // Requester.  Can be either remote host or CUID:  Eg. http://127.0.0.1:5454/authors/1d698d25ff008f7538453c120f581471 (different host) or cl0h7864c0001rsv835tr1dxf (local)
    friendReqId String // Requested.  Must be local CUID
    accept      Boolean // Status of the request? accepted or not yet
    node        String?
    friend      Author @relation(fields: [friendReqId], references: [id])
   
    @@id([authorId, friendReqId,accept])
}

// If you follow and friend, then you can see their public and friend posts
// If you just follow, you can see their public posts
// If you follow and they do not accept your friend request, you can only see their public posts
// If you both follow and friend, you can see each other's public and friend posts

model Nodes {
    type     String // "send", "receive".  If type is send, then our node has permission to send to their remote node.  If recieve, then remote nodes have permission to send to our node.
    url      String
    username String
    password String

    @@id([type, url])
}


model SharedPost {
    id          String    
    owner      PostOwner    @relation(fields: [authorId], references: [id])
    authorId    String
    title       String
    source      String
    origin      String
    description String
    contentType String // [text/plain, text/markdown, application/base64, image/png;base64, image/jpeg;base64]
    content     String?
    categories  String[]
    published   DateTime
    visibility  String // [public, friends]
    unlisted    Boolean
    likeCount   Int       @default(0)
    receiver    String  // Who received this posts
    node       String?
    @@id([id, receiver])
}

model PostOwner {
    id            String        @id @default(cuid())
    displayName   String
    github        String
    profileImage  String
    host          String
    url           String
    Post          SharedPost[]
    node          String?
}