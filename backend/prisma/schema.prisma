// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Store authors
model Author {
    id           String      @id @default(cuid())
    email        String      @unique
    password     String
    displayName  String
    github       String?
    profileImage String?
    Post         Post[]
    Comment      Comment[]
    Likes        Likes[]
    Inbox        Inbox[]
    Followers    Followers[]
}

// Store posts. Each post has a primary key, and references a foreign key author id
model Post {
    id          String    @id @default(cuid())
    author      Author    @relation(fields: [authorId], references: [id])
    authorId    String
    title       String
    source      String
    origin      String
    description String
    contentType String // [text/plain, text/markdown, application/base64, image/png;base64, image/jpeg;base64]
    content     String?
    categories  String[]
    count       Int
    published   DateTime
    visibility  String // [public, friends]
    unlisted    Boolean
    likeCount   Int       @default(0)
    Comment     Comment[]
    Likes       Likes[]
}

// Store comments. Each comment has a primary key, and references a foreign keys author id and post id
model Comment {
    id          String   @id @default(cuid())
    author      Author   @relation(fields: [authorId], references: [id])
    authorId    String
    post        Post     @relation(fields: [postId], references: [id])
    postId      String
    contentType String // [text/plain, text/markdown, application/base64, image/png;base64, image/jpeg;base64]
    comment     String
    published   DateTime
}

// Store likes. Primary key is a combined author id and post id foreign key
model Likes {
    postId   String
    authorId String
    post     Post   @relation(fields: [postId], references: [id])
    author   Author @relation(fields: [authorId], references: [id])

    @@id([postId, authorId])
}

// Store inbox.  Primary key is a combined post id and author id
model Inbox {
    type     String // "post", "follow", "like", or "comment"
    typeId   String // If post, then post id.  If following, then following author id.  If like, then liked post id.  If comment, then comment id
    likedId  String? // Contains the author id that liked the post.  This field is only populated if the type is "like"
    authorId String
    dateTime DateTime // Timestamp the event
    author   Author   @relation(fields: [authorId], references: [id])

    @@id([typeId, authorId])
}

// Store followers.  AuthorId follows FollowingId
model Followers {
    authorId    String // Author id
    followingId String // The author id of the one being followed.  No relation is enforced because they can be on a different host
    author      Author @relation(fields: [authorId], references: [id])

    @@id([authorId, followingId])
}

// Store follow requests.  AuthorId wants to follow FollowReqId
model FollowRequest {
    // Can be either remote host or CUID
    // Eg. http://127.0.0.1:5454/authors/1d698d25ff008f7538453c120f581471 (different host) or cl0h7864c0001rsv835tr1dxf (local)
    authorId    String // Requester
    followReqId String // Requested
    // No relations because either could be on a different host or local

    @@id([authorId, followReqId])
}
